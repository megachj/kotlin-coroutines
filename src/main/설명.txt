
27장
- 비동기 맵
- 지연 초기화 중단
- 연결 재사용
- 코루틴 경합
- 중단 가능한 프로세스 재시작하기

28장
- 코틀린 코루틴 라이브러리로 제공하고 싶다면
    - 다른 언어 내용은 제외하고, kotlin -> java 만 제공할때를 알아보자.
    - 1) runBlocking 을 써서 중단함수를 모두 블로킹 함수로 만든다. 또는 kotlin-jvm-blocking-bridge 를 사용한다.
    - 2) 콜백 함수로 변환한다.
    - 3) CompletableFuture 로 반환하도록 작성한다.
    - 4) RxJava 객체를 반환하도록 작성한다. (Reactor Mono 로 반환하는 것도 알아본다)

- 플로우와 리액티브 스트림을 양방향으로 변환하는 방법

29장
여러 개의 동시성 작업을 수행할 때 사용할 수 잇는 함수는 두 종류가 있다.
- 코루틴 스코프 객체에서 실행되는 일반 함수
- 중단 함수

두 경우의 개념과 차이점을 잘 살펴보자.

30장
- async 코루틴 빌더 뒤에 await 을 호출하지 마라.
- withContext(EmptyCoroutineContext) 대신 coroutineScope 를 사용하세요.
- awaitAll 을 사용하세요.
- 중단 함수는 어떤 스레드에서 호출되어도 안전해야 한다.
- 무거운 함수에서는 yield 를 사용하는 것을 기억하세요.
- 중단 함수는 자식 코루틴이 완료되는 걸 기다린다.
- Job 은 상속되지 않으며, 부모 관계를 위해 사용된다.
- 구조화된 동시성을 깨뜨리지 마세요
- CoroutineScope 를 만들 때는 SupervisorJob 을 사용해라.
- 스코프의 자식은 취소할 수 있다.
